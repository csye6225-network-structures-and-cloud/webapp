name: ami

on:
  push: #pull request on main
    branches: [ main ]

jobs:
  build_ami:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: userdata
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'
          cache: maven
      - name: Build with Maven
        working-directory: ./webapplication

        run: mvn clean install   # integration testing


      - name: Install AWSCLI
        run: sudo pip install awscli

      - name: Configure AWS DEV
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "latest"

      - name: Initialize Packer Init
        working-directory: ./AMI
        run: packer init .

      - name: Build AMI
        working-directory: ./AMI
        run: packer build --var-file=ami.pkrvars.hcl ami.pkr.hcl

      - name: Configure AWS DEMO
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 2: Get the Latest AMI ID
      - name: Retrieve Latest AMI ID
        working-directory: ./AMI
        run: |
          AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      # Step 3: Print Environment Variables
      - name: Print AMI ID Environment Variables
        run: |
          echo "AMI ID: ${{ env.AMI_ID }}"

      # Step 4: Create New Launch Template Version with Latest AMI
      - name: Create Launch Template Version
        run: |
          LTID=$(aws ec2 describe-launch-templates --launch-template-name asg-launch-template | jq -r '.LaunchTemplates[].LaunchTemplateId')
          aws ec2 create-launch-template-version --launch-template-id $LTID --version-description WebVersion2 --source-version 1 --launch-template-data "ImageId=${{ env.AMI_ID }}"
          echo "Launch Template ID: $LTID"
          echo "LTID=$LTID" >> $GITHUB_ENV


      - name: Print LTID Environment Variables
        run: |
          echo "LTID: ${{ env.LTID }}"

      # Step 4: Update Autoscaling Group
#      - name: Update Autoscaling Group
#        run: |
#            aws autoscaling update-auto-scaling-group --auto-scaling-group-name asg-group --launch-template LaunchTemplateId=${{ env.LTID }},Version='$Latest'
      - name: Start Instance Refresh
        run: |
            REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name asg-group --output json | jq -r '.InstanceRefreshId')
            echo "Instance Refresh ID: $REFRESH_ID"
            echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for Instance Refresh Completion
        run: |
            while true; do
              STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name asg-group --instance-refresh-ids ${{ env.REFRESH_ID }} --output json | jq -r '.InstanceRefreshes[0].Status')
              echo "Refresh Status: $STATUS"
              if [ "$STATUS" = "Successful" ] || [ "$STATUS" = "Failed" ]; then
                break
              fi
              sleep 30
            done
            if [ "$STATUS" = "Failed" ]; then
              echo "Instance refresh failed"
              exit 1
            fi

#      - name: Extract AMI ID from manifest
#        working-directory: ./AMI
#        run: |
#            AMI_ID=$(jq -r '.builds[-1].artifact_id|split(":")[1]' ./manifest.json)
#            echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
#
#      - name: Share AMI with DEMO Account
#        run: |
#          aws ec2 modify-image-attribute --image-id $AMI_ID --launch-permission "Add=[{UserId=${{secrets.DEMO_ACCOUNT_ID}}}]"
