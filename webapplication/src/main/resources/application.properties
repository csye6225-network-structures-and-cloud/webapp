#logging.level.org.springframework=debug

spring.datasource.url=jdbc:postgresql://localhost:5432/userdata
spring.datasource.username=postgres
spring.datasource.password=postgres

spring.jpa.hibernate.ddl-auto=update
#spring.jpa.show-sql: true
server.servlet.session.persistent=false
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false
app.environment=local
spring.security.authentication.disable-session-creation=true
#tomcat by default works on 8080 port
server.port=8080

logging.level.root=INFO
logging.level.com.example.webapplication=INFO
logging.file.name= csye6225.log
publish.metrics = true
metrics.server.hostname=localhost
metrics.server.port=8125
sns.topicArn=arn:aws:sns:us-east-1:494954498426:sns_topic-57e0d37
aws.region=us-east-1


#app.environment=production
#spring.datasource.url=jdbc:postgresql://rdsinstanceb8beeaa.c8isjm4zjvsa.us-east-1.rds.amazonaws.com:5432/csye6225
#spring.datasource.username=csye6225
#spring.datasource.password=csye6225
#spring.jpa.hibernate.ddl-auto=update
#server.servlet.session.persistent=False
#spring.mvc.throw-exception-if-no-handler-found=True
#spring.web.resources.add-mappings=False
#spring.security.authentication.disable-session-creation=True
#server.port=8080
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#logging.file.name=csye6225.log
#logging.file.path=/home/admin
#logging.level.com.example.webapplication.*=INFO
#publish.metrics=true
#metrics.server.hostname=localhost
#metrics.server.port=8125

# here we say to spring, pls make DB tables for me if i create classes
# Hibernate ddl auto (create, create-drop, update)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
# This is specific to DB for us its postgressql
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect